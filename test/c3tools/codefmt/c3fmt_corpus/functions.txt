================================================================================
simple_main
================================================================================

fn void 
main() { return;}

--------------------------------------------------------------------------------
fn void main()
{
    return;
}
================================================================================
simple_main_int
================================================================================

fn int 
main(
String[] args
) { return   0   ;}

--------------------------------------------------------------------------------
fn int main(String[] args)
{
    return 0;
}
================================================================================
ret_generic_list
================================================================================

fn List(<int>) 
main(
String[] args
) { return   0   ;}

--------------------------------------------------------------------------------
fn List(<int>) main(String[] args)
{
    return 0;
}
================================================================================
ret_generic_list_pointer_opt
================================================================================

fn List(<int>)*! 
main(
String[] args
) { return   0   ;}

--------------------------------------------------------------------------------
fn List(<int>)*! main(String[] args)
{
    return 0;
}
================================================================================
ret_generic_method
================================================================================

fn List(<int>)*! 
Foo.main(
String[] args
) { return   0   ;}

--------------------------------------------------------------------------------
fn List(<int>)*! Foo.main(String[] args)
{
    return 0;
}
================================================================================
ret_generic_method_attrs
================================================================================

fn List(<int>) * ! 
Foo.main(
String[] args
) @test @if("dio" || too) { return   0   ;}

--------------------------------------------------------------------------------
fn List(<int>)*! Foo.main(String[] args) @test @if("dio" || too)
{
    return 0;
}
================================================================================
returns_array_type
================================================================================

fn String[]! 
Foo.main(
String[] args
) { return   0   ;}

--------------------------------------------------------------------------------
fn String[]! Foo.main(String[] args)
{
    return 0;
}
================================================================================
returns_multiple_arguments
================================================================================

fn String[]! 
Foo.main(
String[] args, int* foo, List(<float>)     
bar, na   ,    varg...
) { return   0   ;}

--------------------------------------------------------------------------------
fn String[]! Foo.main(String[] args, int* foo, List(<float>) bar, na, varg...)
{
    return 0;
}
================================================================================
typed_vargs
================================================================================

fn String[]! 
Foo.main(String[] args, int ...varg
) { 
call(i, j, ...varg);
return   0   ;}

--------------------------------------------------------------------------------
fn String[]! Foo.main(String[] args, int ...varg)
{
    call(i, j, ...varg);
    return 0;
}
================================================================================
long_arguments
================================================================================

fn String[]! Foo.main(String[] args, int* foo, List(<float>) bar, MySuperClass[] last
) { return   0   ;}

--------------------------------------------------------------------------------
fn String[]! Foo.main(
    String[] args, int* foo, List(<float>) bar, MySuperClass[] last
)
{
    return 0;
}
================================================================================
long_arguments_multiline
================================================================================

fn String[]! Foo.main(SoTypeIsHuuuuuuge ok, String[] args, int* foo, List(<float>) bar, MySuperClass[] last, List(<ThisIsTooBig>) too_be_true
) { return   0   ;}

--------------------------------------------------------------------------------
fn String[]! Foo.main(
    SoTypeIsHuuuuuuge ok,
    String[] args,
    int* foo,
    List(<float>) bar,
    MySuperClass[] last,
    List(<ThisIsTooBig>) too_be_true
)
{
    return 0;
}
================================================================================
arguments_magic_comma
================================================================================

fn String[]! 
Foo.main(
String[] args, int* foo, List(<float>)     
bar, na   ,
) { return   0   ;}

--------------------------------------------------------------------------------
fn String[]! Foo.main(
    String[] args,
    int* foo,
    List(<float>) bar,
    na,
)
{
    return 0;
}
================================================================================
simple_main_docstring
================================================================================
<* My doc *>
fn void 
main() { return;}

--------------------------------------------------------------------------------
<* My doc *>
fn void main()
{
    return;
}
================================================================================
simple_main_docstring_multiline
================================================================================
<*
   My doc asdlkjad aiis is not formatted at                                all an used as is
*>


fn void 
main() { return;}

--------------------------------------------------------------------------------
<*
 My doc asdlkjad aiis is not formatted at                                all an used as is
*>
fn void main()
{
    return;
}
================================================================================
simple_main_docstring_only_contract
================================================================================
<* @require foo > 1 *>
fn void 
main() { return;}

--------------------------------------------------------------------------------
<* @require foo > 1 *>
fn void main()
{
    return;
}
================================================================================
simple_lambda
================================================================================

macro CFile stderr() => __acrt_iob_func(STDERR_FD);
fn bool in_range(char c, 
char start, char len) => in_range_m(c, 
start, len);

--------------------------------------------------------------------------------
macro CFile stderr() => __acrt_iob_func(STDERR_FD);
fn bool in_range(char c, char start, char len) => in_range_m(c, start, len);
================================================================================
simple_lambda_with_attrs
================================================================================

macro CFile stderr() @if(FOO||Bar||   "non form") => __acrt_iob_func(STDERR_FD);
fn bool in_range(char c, 
char start, char len) => in_range_m(c, 
start, len, args_are_too, long, and_many, of_them_getting_new_line);

fn bool in_range(char c, 
char start, char len) => in_range_m(c, 
start, len, args_are_too, long, and_many, of_them_getting_new_line, but_sometimes_even, multiline);
fn bool in_range(char c, char start, char len) => with_magic_comma(c, 
start, len, magic_comma,);
--------------------------------------------------------------------------------
macro CFile stderr() @if(FOO||Bar||   "non form") => __acrt_iob_func(STDERR_FD);
fn bool in_range(char c, char start, char len) => in_range_m(c, start, len, args_are_too, long, and_many, of_them_getting_new_line);

fn bool in_range(char c, char start, char len) => in_range_m(c, start, len, args_are_too, long, and_many, of_them_getting_new_line, but_sometimes_even, multiline);
fn bool in_range(char c, char start, char len) => with_magic_comma(c, start, len, magic_comma,);
================================================================================
fn_with_lambda_arg
================================================================================
fn void remove_using_test()
{
        IntList test;
        usz removed;

        removed = test.remove_using_test(fn bool_long(i, ctx) => *i >= *(int*)ctx, &&10);
        assert(removed == 3);
    thread.create(fn int(void* arg)
    {
        UnbufferedChannel(<int>) c = (UnbufferedChannel(<int>))arg;
        c.push(123)!!;
        if (foo) {
        c.push(321)!!; }
        return 0;
    }, (void*)c)!!;

}
--------------------------------------------------------------------------------
fn void remove_using_test()
{
    IntList test;
    usz removed;

    removed = test.remove_using_test(
        fn bool_long(i, ctx) => *i >= *(int*)ctx, &&10
    );
    assert(removed == 3);
    thread.create(fn int (void* arg) {
        UnbufferedChannel(<int>) c = (UnbufferedChannel(<int>))arg;
        c.push(123)!!;
        if (foo) {
            c.push(321)!!;
        }
        return 0;
    }, (void*)c)!!;

}
================================================================================
simple_lambda_with_docs
================================================================================

<* A doc *>

macro CFile stderr() => __acrt_iob_func(STDERR_FD);

<* Another doc
@param c "with contracts" 
*>

fn bool in_range(char c, 
char start, char len) => in_range_m(c, 
start, len);

--------------------------------------------------------------------------------
<* A doc *>
macro CFile stderr() => __acrt_iob_func(STDERR_FD);

<*
 Another doc

 @param c "with contracts"
*>
fn bool in_range(char c, char start, char len) => in_range_m(c, start, len);
================================================================================
fn_with_amp_self
================================================================================

macro NodeParserState.check_scope( &self, TokenType t)
{
}

--------------------------------------------------------------------------------
macro NodeParserState.check_scope(&self, TokenType t)
{
}
================================================================================
fn_with_long_cast_in_ternary
================================================================================

macro parse_callable_params(
    Ast* ast, Token* t, AstCallable* node_func, NodeParserState* state
) @local
{
    AstCallableParam* current_param = state.sub_node ?(
        AstCallableParam*
    )state.sub_node : null;
}

--------------------------------------------------------------------------------
macro parse_callable_params(
    Ast* ast, Token* t, AstCallable* node_func, NodeParserState* state
) @local
{
    AstCallableParam* current_param = state.sub_node ? (AstCallableParam*)state.sub_node : null;
}
================================================================================
fn_with_long_call_wrap_when_cast
================================================================================

macro parse_callable_params()
{
    if(foo) { if(bar){
    current_param = (
        AstCallableParam*
    )ast.@allc_add(
        AstCallableParam,
        &node_func.params,
        &ast.lexer.token
    );
    }}
}

--------------------------------------------------------------------------------
macro parse_callable_params()
{
    if (foo) {
        if (bar) {
            current_param = (AstCallableParam*)ast.@allc_add(
                AstCallableParam,
                &node_func.params,
                &ast.lexer.token
            );
        }
    }
}
================================================================================
fn_with_long_call_wrap_no_args_assert
================================================================================

macro parse_callable_params()
{
    if(foo) { if(bar){
        assert(self.cache_statement_len() == 0, "cache_statement_dump must be called befor fmt: off");
    }}
}

--------------------------------------------------------------------------------
macro parse_callable_params()
{
    if (foo) {
        if (bar) {
            assert(
                self.cache_statement_len() == 0,
                "cache_statement_dump must be called befor fmt: off"
            );
        }
    }
}
================================================================================
fn_with_long_call_with_last_params_no_wrap
================================================================================

macro parse_callable_params()
{
    if(foo) { if(bar){
    current_param = ast.@allc_add(
        AstCallableParam,
        &node_func.params,
        &ast.lexer.token()
    );
    }}
}

--------------------------------------------------------------------------------
macro parse_callable_params()
{
    if (foo) {
        if (bar) {
            current_param = ast.@allc_add(
                AstCallableParam, &node_func.params, &ast.lexer.token()
            );
        }
    }
}
================================================================================
func_forward_decl
================================================================================
FopenFn native_fopen_fn @weak @if(!$defined(native_fopen_fn));
FcloseFn native_fclose_fn @weak @if(!$defined(native_fclose_fn));
--------------------------------------------------------------------------------
FopenFn native_fopen_fn @weak @if(!$defined(native_fopen_fn));
FcloseFn native_fclose_fn @weak @if(!$defined(native_fclose_fn));
================================================================================
fn_with_long_call_null
================================================================================

macro parse_callable_params()
{
            !win32::createProcessW(null, convert_command_line_win32(command_line), null,   // process security attributes
            null,   // primary thread security attributes
            1,   // handles are inherited
            flags,   // creation flags
            used_environment,   // environment
            null,   // use parent dir
            & start_info,   // startup info ptr
            & process_info);
}

--------------------------------------------------------------------------------
macro parse_callable_params()
{
    !win32::createProcessW(
        null,
        convert_command_line_win32(command_line),
        null,  // process security attributes
        null,  // primary thread security attributes
        1,  // handles are inherited
        flags,  // creation flags
        used_environment,  // environment
        null,  // use parent dir
        &start_info,  // startup info ptr
        &process_info
    );
}
================================================================================
fn_variable_invalid_arg_list
================================================================================

macro parse_callable_params()
{
    var check_sort = fn bool ($Type list, usz start, usz end, $typeof(cmp) cmp) {
        return true;
    };
}
--------------------------------------------------------------------------------
macro parse_callable_params()
{
    var check_sort = fn bool ($Type list, usz start, usz end, $typeof(cmp) cmp) {
        return true;
    };
}
================================================================================
fn_trailing_body
================================================================================
fn int foo(int x) => @pool(a, b)
{
    String s = string::tformat("%d", x);
    io::printn(s);
    return 2;
}
--------------------------------------------------------------------------------
fn int foo(int x)
=> @pool(a, b)
{
    String s = string::tformat("%d", x);
    io::printn(s);
    return 2;
}
================================================================================
fn_trailing_body_with_attrs
================================================================================
fn int foo(int x) @pure @if(env::LIBC || env::WIN32) => @pool() 
{
    return string::tformat("%d", x).len;
}
--------------------------------------------------------------------------------
fn int foo(int x) @pure @if(env::LIBC || env::WIN32)
=> @pool()
{
    return string::tformat("%d", x).len;
}
================================================================================
fn_lambda_with_returning_array
================================================================================
// ok
fn int foo(int x) => {1, 2, 3};
--------------------------------------------------------------------------------
// ok
fn int foo(int x) => { 1, 2, 3 };
================================================================================
fn_lambda_scope_with_params
================================================================================
fn void shared_mutex() @test => mem::@scoped(&allocator::LIBC_ALLOCATOR)
{
    return string::tformat("%d", x).len;
}
--------------------------------------------------------------------------------
fn void shared_mutex() @test
=> mem::@scoped(&allocator::LIBC_ALLOCATOR)
{
    return string::tformat("%d", x).len;
}
