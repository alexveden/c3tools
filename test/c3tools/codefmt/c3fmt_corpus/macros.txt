================================================================================
simple_macro
================================================================================

macro    

main() { return;}

--------------------------------------------------------------------------------
macro main()
{
    return;
}
================================================================================
simple_ct_macro
================================================================================

macro @m(
#x 

, y
)
{  #x = 2 * y;
}

--------------------------------------------------------------------------------
macro @m(#x, y)
{
    #x = 2 * y;
}
================================================================================
simple_macro_ct_type
================================================================================

macro size($Type)
{
    return $Type.sizeof + 

    int.sizeof;
}
--------------------------------------------------------------------------------
macro size($Type)
{
    return $Type.sizeof + int.sizeof;
}
================================================================================
simple_macro_body_definition
================================================================================

macro SomeType   * !
   @for_each(   list   ; @body(   it  ))
{
    for ($typeof(list)
    x = list; x;
    x = x.next)
    {
    @body(x);
    }
}
--------------------------------------------------------------------------------
macro SomeType*! @for_each(list; @body(it))
{
    for ($typeof(list) x = list; x; x = x.next) {
        @body(x);
    }
}
================================================================================
name_fields
================================================================================

macro usz @offset($Type, #field)
{
        $Type* t = null;
    return (usz)

    (uptr)  &    t   .   #field;
}

--------------------------------------------------------------------------------
macro usz @offset($Type, #field)
{
    $Type* t = null;
    return (usz)(uptr)&t.#field;
}
================================================================================
hash_macro
================================================================================

macro Foo.@check(#expr, $Type t, args...)
{
    if ( !  
    #expr)
    abort(
    $stringify(#expr
    ));
}

--------------------------------------------------------------------------------
macro Foo.@check(#expr, $Type t, args...)
{
    if (!#expr) abort($stringify(#expr));
}
================================================================================
hash_macro_with_contracts
================================================================================
<*
@require $defined(#a=#b,#b= #a)
*>
macro void @swap(#a,     #b)
{
        var temp = #a;
    #a = #b;
        #b = temp;
}

--------------------------------------------------------------------------------
<*
 @require $defined(#a = #b, #b = #a)
*>
macro void @swap(#a, #b)
{
    var temp = #a;
    #a = #b;
    #b = temp;
}
================================================================================
body_macro_with_vector_init
================================================================================
macro void Slice2d.@each(&self; @body(usz[<2>], Type))
{
    foreach (y, line : *self)
    {
        foreach (x, val : line)
        {
            @body({ x, y }, val);
        }
    }
}

--------------------------------------------------------------------------------
macro void Slice2d.@each(&self; @body(usz[<2>], Type))
{
    foreach (y, line : *self) {
        foreach (x, val : line) {
            @body({x, y}, val);
        }
    }
}
================================================================================
mem_scoped_stack_pool
================================================================================
macro void @stack_pool(usz $size; @body) @builtin
{
    mem::@scoped(&allocator){ @body(); };
}
--------------------------------------------------------------------------------
macro void @stack_pool(usz $size; @body) @builtin
{
    mem::@scoped(&allocator) {
        @body();
    };
}
================================================================================
matrix_component_mul
================================================================================
macro matrix_component_mul(mat, val) @private
{
    var $Type = Real[<$typeof(mat.m).len>];
    return $typeof(*mat) { .m = val * ($Type)mat.m };
}
--------------------------------------------------------------------------------
macro matrix_component_mul(mat, val) @private
{
    var $Type = Real[<$typeof(mat.m).len>];
    return $typeof(*mat){ .m = val * ($Type)mat.m };
}
