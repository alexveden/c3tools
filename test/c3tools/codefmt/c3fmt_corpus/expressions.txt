================================================================================
expressions
================================================================================

fn void main() 
{ 
int a = b*2/1-1+3%1;
b%= 10+a;
b&=a;
b|=a;
b^=a;
b&&&a;
b|||a;
b+++a;
b/=a;
a==s;
a>=s;
a<=s;
a>=s;
a-=s;
a+=s;
a*=s;
a%=s;
a!=s;
a  ++  s;
--  a;
a<<1;
a>>1;
return;
}

--------------------------------------------------------------------------------
fn void main()
{
    int a = b * 2 / 1 - 1 + 3 % 1;
    b %= 10 + a;
    b &= a;
    b |= a;
    b ^= a;
    b &&& a;
    b ||| a;
    b +++ a;
    b /= a;
    a == s;
    a >= s;
    a <= s;
    a >= s;
    a -= s;
    a += s;
    a *= s;
    a %= s;
    a != s;
    a++s;
    --a;
    a << 1;
    a >> 1;
    return;
}
================================================================================
simple_expressions
================================================================================

fn void 
main() { 
bool a =(a||b)&&c; 
int* bin = (int*)&a;
b = *(int*)&a;
b = (*a = 2);
b = { .work = 1, .work=2 };
 (  void) free(data);
    (void * * )free(data);
    int* bin = &&1;
    self.data = ((char*)self)+SymbolCache.sizeof + SymbolItem.sizeof * capacity;
return;
}

--------------------------------------------------------------------------------
fn void main()
{
    bool a = (a || b) && c;
    int* bin = (int*)&a;
    b = *(int*)&a;
    b = (*a = 2);
    b = { .work = 1, .work = 2 };
    (void)free(data);
    (void**)free(data);
    int* bin = &&1;
    self.data = ((char*)self) + SymbolCache.sizeof + SymbolItem.sizeof * capacity;
    return;
}
================================================================================
ternary
================================================================================

fn void 
main() { 
bool a = foo    ? bar   : 1;
return file ?: file_open_errno()?;
return i ?: Foo.X?;
return x ?: (y ?: x);
assert((root.get_int("yyy") ?? -1) == -1);
double x = ((double)testError() + testError()) ?? 100;
io::printfn("6:%s", @catch((3 > 2 ? Foo.ABC? : 4) ?? Foo.DEF?));
bool a = foo    ? * other   : * self;
return * i ?: *self;
return FOO ? X : Z;
    return foo ? socket_error()? : bar;
}

--------------------------------------------------------------------------------
fn void main()
{
    bool a = foo ? bar : 1;
    return file ?: file_open_errno()?;
    return i ?: Foo.X?;
    return x ?: (y ?: x);
    assert((root.get_int("yyy") ?? - 1) == -1);
    double x = ((double)testError() + testError()) ?? 100;
    io::printfn("6:%s", @catch((3 > 2 ? Foo.ABC? : 4) ?? Foo.DEF?));
    bool a = foo ? *other : *self;
    return *i ?: *self;
    return FOO ? X : Z;
    return foo ? socket_error()? : bar;
}
================================================================================
numbers
================================================================================

fn void 
main() { 
int a = -1;
int a = -float.inf;
int a = 3 -float.inf;
int a = 3+1;
return +1;
return 1;
int a = (usz)-1;
int a = -add(-2, -3);
return (usz)+1.234f;
return a == -1;
}

--------------------------------------------------------------------------------
fn void main()
{
    int a = -1;
    int a = -float.inf;
    int a = 3 - float.inf;
    int a = 3 + 1;
    return +1;
    return 1;
    int a = (usz)-1;
    int a = -add(-2, -3);
    return (usz)+1.234f;
    return a == -1;
}
================================================================================
generic_vec_expr
================================================================================

fn void main() { 
List(<Foo*>) lfoo;
List(<Foo*>)* lfoo = List(<Foo*>){}.init(bar: 1);
int[<2>]* lfoo = int[<2 >]{}.init(bar: 1);
}

--------------------------------------------------------------------------------
fn void main()
{
    List(<Foo*>) lfoo;
    List(<Foo*>)* lfoo = List(<Foo*>){}.init(bar: 1);
    int[<2>]* lfoo = int[<2>]{}.init(bar: 1);
}
================================================================================
conditional_expr_multi_parens_multiline
================================================================================
macro bool char_is_base64(char c)
{
    return ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || (c >= '0' && c <= '9')
                || c == '+' || c == '/');
}
--------------------------------------------------------------------------------
macro bool char_is_base64(char c)
{
    return (
        (c >= 'A' && c <= 'Z') ||
        (c >= 'a' && c <= 'z') ||
        (c >= '0' && c <= '9') ||
        c == '+' ||
        c == '/'
    );
}
================================================================================
conditional_expr_multi_parens_single_line
================================================================================
macro bool char_is_base64(char c)
{
    return ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || (c >= '0' && c <= '9'));
}
--------------------------------------------------------------------------------
macro bool char_is_base64(char c)
{
    return (
        (c >= 'A' && c <= 'Z') ||
        (c >= 'a' && c <= 'z') ||
        (c >= '0' && c <= '9')
    );
}
================================================================================
call_with_parens_single_line_wrap
================================================================================
macro bool char_is_base64(char c)
{
    return its_along_call((arg_long_ags+1), (foo ?(bar) : baz), (a && b && coooooooooool) );
    return its_along_call((arg_long_ags+1), (foo ?bar : baz), (a && b && coooooooooool) );
}
--------------------------------------------------------------------------------
macro bool char_is_base64(char c)
{
    return its_along_call(
        (arg_long_ags + 1), (foo ? (bar) : baz), (a && b && coooooooooool)
    );
    return its_along_call(
        (arg_long_ags + 1), (foo ? bar : baz), (a && b && coooooooooool)
    );
}
================================================================================
call_with_parens_multi_line_wrap
================================================================================
macro bool char_is_base64(char c)
{
    return its_along_call((arg_long_ags+1), (foo ?(bar) : baz), (a && b && coooooooooool), (a | super + too_long ) );
}
--------------------------------------------------------------------------------
macro bool char_is_base64(char c)
{
    return its_along_call(
        (arg_long_ags + 1),
        (foo ? (bar) : baz),
        (a && b && coooooooooool),
        (a | super + too_long)
    );
}
================================================================================
bang_expressions
================================================================================

fn List(<int>)! foo() => 0;
fn int[<2>]! foo() => 0;

def TFoo = fn List(<int>)! foo();
def TFoo = fn int[<3>]! foo();
def TFoo = fn int! foo();
def TFoo = fn int*! foo();

fn void! main() { 
    char! c = call();
    char*! c = call();
    char c = call()!;
    char c = !call();
    int[<2>]! c = call();
    List<[2]>! c = call();
    List(<2>)! c = call();
    if(!foo()) return 0;
    if(!foo() && (!(foo | bar) && !foo)) return 0;
    return !(!foo());
    if(!*self) return 0;
}

--------------------------------------------------------------------------------
fn List(<int>)! foo() => 0;
fn int[<2>]! foo() => 0;

def TFoo = fn List(<int>)! foo();
def TFoo = fn int[<3>]! foo();
def TFoo = fn int! foo();
def TFoo = fn int*! foo();

fn void! main()
{
    char! c = call();
    char*! c = call();
    char c = call()!;
    char c = !call();
    int[<2>]! c = call();
    List <[2] >! c = call();
    List(<2>)! c = call();
    if (!foo()) return 0;
    if (!foo() && (!(foo | bar) && !foo)) return 0;
    return !(!foo());
    if (!*self) return 0;
}
================================================================================
brackets
================================================================================

fn void main() { 
    char[] foo = arr[];
    int[?] arr = { 1 };
    ar[:] = 1;
    foo = arr[:a];
    arr[..a];
    arr[b..];
    arr[b..a];
    arr[b:];
    arr[:a];
    arr[b:a];
    arr[^1:];
    arr[:^2];
    arr[^2..^1];
    arr[i..^1];
    arr[i + 1 .. i * 1];
    arr[i + 1 .. i];
    arr[foo(1, 2, kwarg: 3) + 1 : bar()];
    arr[(i & a) * 0xff];
    arr[(i | a) & 0xff];
    return a[ : decode()!];
    arr[(0.2f | DASK) & MASK];
    arr[(0.2f >> DASK) & MASK];
    arr[(0.2f << foo()) & MASK];
    arr[((uint)0.2f << (char)foo()) & (int)MASK];
    arr[src[i + 1 :]];
    arr[src[i + 1 : i]];
    arr[src[i : i + 1]];
    arr[(char)((result ^ x) & x)];
    arr[(in[i + 1] & 3) >> 2 * foo];
    arr[i++];
    arr[--i];
    arr[a - 1];
    int a = (int)arr[i + 1];
    int a = (int)arr[i - 1];
    int a = (int)arr[i * 1];
    int a = (int)arr[i & 1];
    int a = (int)arr[i ^ 1];
    int a = (void*)arr + foo;
    int a = (void*)arr - foo;
    int a = (void*)arr * foo;
    int a = (void*)arr & foo;
}

fn void b(int[2]* p, int* p2)
{
}

--------------------------------------------------------------------------------
fn void main()
{
    char[] foo = arr[];
    int[?] arr = { 1 };
    ar[:] = 1;
    foo = arr[:a];
    arr[..a];
    arr[b..];
    arr[b..a];
    arr[b:];
    arr[:a];
    arr[b:a];
    arr[^1:];
    arr[:^2];
    arr[^2..^1];
    arr[i..^1];
    arr[i + 1 .. i * 1];
    arr[i + 1 .. i];
    arr[foo(1, 2, kwarg: 3) + 1 : bar()];
    arr[(i & a) * 0xff];
    arr[(i | a) & 0xff];
    return a[:decode()!];
    arr[(0.2f | DASK) & MASK];
    arr[(0.2f >> DASK) & MASK];
    arr[(0.2f << foo()) & MASK];
    arr[((uint)0.2f << (char)foo()) & (int)MASK];
    arr[src[i + 1 :]];
    arr[src[i + 1 : i]];
    arr[src[i:i + 1]];
    arr[(char)((result ^ x) & x)];
    arr[(in[i + 1] & 3) >> 2 * foo];
    arr[i++];
    arr[--i];
    arr[a - 1];
    int a = (int)arr[i + 1];
    int a = (int)arr[i - 1];
    int a = (int)arr[i * 1];
    int a = (int)arr[i & 1];
    int a = (int)arr[i ^ 1];
    int a = (void*)arr + foo;
    int a = (void*)arr - foo;
    int a = (void*)arr * foo;
    int a = (void*)arr & foo;
}

fn void b(int[2]* p, int* p2)
{
}
================================================================================
double_plus_minus
================================================================================
fn void main()
{
    usz len =++(*index_ptr);
    for(; ++(*a); ++i);
    return ++a;
    return --a;
}
--------------------------------------------------------------------------------
fn void main()
{
    usz len = ++(*index_ptr);
    for (; ++(*a); ++i) ;
    return ++a;
    return --a;
}
================================================================================
double_quest_errors
================================================================================
fn void main()
{
    String text = io::readline() ?? InputResult.FAILED_TO_READ?!;
    io::fprintf(out, "%s", s.title.get() ?? "missing", s.ok)!;
    return Summary {
        .title = new_string_val(doc.head.get().title.get()) ?? MaybeString {},
        .ok = true,
    };
    long e10 = String.to_long() ?? NumberConversion.MALFORMED_FLOAT ? !;
    url.path = decode(allocator) ?? UrlParsingResult.INVALID_PATH ? !;
    int! b = foo((a + 3) ?? 2);
    char* data4 = $embed("fiek") ?? null;
    bool r = foo ? !bar : !vrr;
    bool r = foo ? (!bar) : !vrr;
}
--------------------------------------------------------------------------------
fn void main()
{
    String text = io::readline() ?? InputResult.FAILED_TO_READ?!;
    io::fprintf(out, "%s", s.title.get() ?? "missing", s.ok)!;
    return Summary {
        .title = new_string_val(doc.head.get().title.get()) ?? MaybeString {},
        .ok = true,
    };
    long e10 = String.to_long() ?? NumberConversion.MALFORMED_FLOAT?!;
    url.path = decode(allocator) ?? UrlParsingResult.INVALID_PATH?!;
    int! b = foo((a + 3) ?? 2);
    char* data4 = $embed("fiek") ?? null;
    bool r = foo ?!bar : !vrr;
    bool r = foo ? (!bar) : !vrr;
}
================================================================================
literal_chars_unicode
================================================================================
module foo;

int aa = 'ä';
int x = 'ABCD';
uint y = 'Helo';
ushort z = '\x31\x32';
int d = '\u0031';
char b = '\x40';
uint abc = '\U133222AB';
uint foo = '謝';
--------------------------------------------------------------------------------
module foo;

int aa = 'ä';
int x = 'ABCD';
uint y = 'Helo';
ushort z = '\x31\x32';
int d = '\u0031';
char b = '\x40';
uint abc = '\U133222AB';
uint foo = '謝';
================================================================================
new_designated_initializers
================================================================================
fn void main()
{
    f64_helper(x64, x64, 1.0, 1.0, 1.0, 1.0, 1.0, (Complex) { 1.0, 1.0 });
    blorg((Test){});
    return (Test){};
      f_va_callee(1, 2, 3, 4.0, 5.0, (Tiny){6, 7, 8, 9},
         (Small){10, null}, (Small_aligned){11},
         (Large){12, 13, 14, 15});
         int[?][?][] x = (int[2][1][]) { { { 1, 2 } } };
         int z = (int) (Foo) { .abc = 2, .defg = 1 };
         Foo4 *f4 = &&(Foo4) { .expand = 2, .a = true, .b = true, .widget = &f };
         io::printfn("%s", $$reduce_max((double[<2>]) { 23.2, 23.3 }));
         var $b4 = x'403322' +++ (char[2]) { 1, 2 };
         IFoo foo = @clone((Ba){});
         if (contains(url, "title-missing")) return { dupe((Head) { .title = null })! };
         return buildSummary(readDoc(url)) ?? (Summary) { .title = null, .ok = false };
         bool x = ! (int[]) { 1, 2, 3 };
         int x = $typeof((int[?]) { 1, 2, 3}).len;
         result = mem::gather(y, (bool[<2>]) { true, false }, (int[<2>]){ 10, 20 });
}
--------------------------------------------------------------------------------
fn void main()
{
    f64_helper(x64, x64, 1.0, 1.0, 1.0, 1.0, 1.0, (Complex){1.0, 1.0});
    blorg((Test){});
    return (Test){};
    f_va_callee(
        1,
        2,
        3,
        4.0,
        5.0,
        (Tiny){6, 7, 8, 9},
        (Small){10, null},
        (Small_aligned){11},
        (Large){12, 13, 14, 15}
    );
    int[?][?][] x = (int[2][1][]){ { {1, 2}} };
    int z = (int)(Foo){ .abc = 2, .defg = 1 };
    Foo4* f4 = &&(Foo4){ .expand = 2, .a = true, .b = true, .widget = &f };
    io::printfn("%s", $$reduce_max((double[<2>]){23.2, 23.3}));
    var $b4 = x'403322' +++ (char[2]){ 1, 2 };
    IFoo foo = @clone((Ba){});
    if (contains(url, "title-missing")) return { dupe((Head){.title = null})! };
    return buildSummary(readDoc(url)) ?? (Summary){
        .title = null, .ok = false
    };
    bool x = !(int[]){ 1, 2, 3 };
    int x = $typeof((int[?]){1, 2, 3}).len;
    result = mem::gather(y, (bool[<2>]){true, false}, (int[<2>]){10, 20});
}
